apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ include "accusation.fullname" . }}
  namespace: {{ .Values.namespace }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  # replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ .Values.selectorLabels }}
  template:
    metadata:
      labels:
        app: {{ .Values.selectorLabels }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
          # args:
          #   - /bin/sh
          #   - -c
          #   - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.livenessProbe.port }}
            # exec:
            #   command:
            #     - cat
            #     - /tmp/healthy
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.readinessProbe.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          securityContext:
            privileged: {{ .Values.securityContext.privileged }}
          env:
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.env.configMap.name }}
                  key: log-level
            - name: KAFKA_BROKER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.env.configMap.name }}
                  key: kafka-broker
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.env.configMap.name }}
                  key: db-host
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.secret.name }}
                  key: db-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.secret.name }}
                  key: db-password
            - name: MAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.secret.name }}
                  key: mail-username
            - name: MAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.secret.name }}
                  key: mail-password
          volumeMounts :
            - name: {{ .Values.logVolume.name }}
              mountPath: {{ .Values.logVolume.path }}
      volumes :
        - name :  {{ .Values.logVolume.name }}
          hostPath:
            path: {{ .Values.logVolume.path }}
            type: {{ .Values.logVolume.type }}

  strategy:
    blueGreen:
      activeService: {{ include "accusation.fullname" . }}
      #previewService:
      autoPromotionEnabled: {{ .Values.blueGreen.autoPromotion }}
